syntax = "proto3";

package chatpb;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";


message Group{
    string group_id  = 1;
    string group_name = 2;
    string chat_id = 3;
}

message TextMessage{
    string message = 1;
}

message FileMessage{
    TextMessage  message = 1;
    bytes file_chunk = 2;
}

message CommonResponse{
    string message  = 1;
    int32 code = 2;
}

message CreateGroup{
    string group_name = 1;
    bool isPublic = 2;
}

message GroupInfo {
    string client = 1;
    string groupName = 2;
}

message GroupList {
    repeated Group groups = 1;
    int32 total = 2;
    CommonResponse common_response = 3;
}

message User {
    string user_id = 1;
    string user_name = 2;
    string chat_id = 3;
}

message UserList {
    repeated User users = 1;
    int32 total = 2;
    CommonResponse common_response = 3;

}

message CommonRequest{
    string access_token  = 1;
}

message SingleMessage{
    string reciver_id = 2;
    string chat_id  = 3;
}

message ChatMessage{
    string senderid = 1;
    oneof message_user{
        TextMessage message = 2;
        FileMessage file_message = 3;
    }
    string sender_name = 4;
    bool isGroupMessage = 5;
    oneof message_group {
    SingleMessage single_message = 6;
    Group group = 7;
    }
    string chat_id = 8;
    google.protobuf.Timestamp creation_time = 9;
    google.protobuf.Timestamp delivery_time = 10;
}

message AddMember{
    User userInfo = 1;
}

message KickMember{
    User userInfo = 1;
}

message ReadHistoryRequest {
	int32 limit = 1;
	int32 offset = 2;
    string chat_id = 3;
}

message ReadHistoryResponse {
    repeated ChatMessage messages = 1;
    CommonResponse common_response = 2;
}

message LeaveGroupRequest{
    Group group_info = 1;
    User user_info  = 2;
}

message P2PChatRequest{
    User user_info = 1;
    User reciver_info = 2;
}

message P2PChatResponse{
    CommonResponse commmonResponse = 1;
    string chat_id  = 2;
}


message AllChats{
    repeated User all_users = 1;
    repeated Group all_groups = 2;
    CommonResponse common_response = 3;
}

service ChatRoom {
    // chat stream for both side bi-directional streaming
    rpc Chat(stream ChatMessage) returns (stream ChatMessage){
    };
    // single chat p2p
    rpc StartP2PChat(P2PChatRequest) returns (P2PChatResponse){
        option (google.api.http) = {
            post: "/v1/chat/create/p2p"
            body:"*"
		};
    };
    // Get all the chats
    rpc UserChats(CommonRequest) returns (AllChats){
            option (google.api.http) = {
                post: "/v1/chat/all"
                body:"*"
            };
    };
    // Create chat group
    rpc CreateGroups(CreateGroup) returns (CommonResponse){
        option (google.api.http) = {
            post: "/v1/chat/create/group"
            body:"*"
		};
    };
    // Join chat group
    rpc JoinGroup(Group) returns (CommonResponse){
        option (google.api.http) = {
            put: "/v1/chat/join/group"
            body:"*"
		};
    };
    // Delete Chat group
    rpc DeleteGroup(Group) returns (CommonResponse){
        option (google.api.http) = {
            delete: "/v1/chat/delete/group"
		};
    };
    // Get all Group list
    rpc GetGroupList(CommonRequest) returns (GroupList){
        option (google.api.http) = {
            get: "/v1/chat/groupslist"
		};
    };
    // Get all user in a particular group
    rpc GetGroupUserList(Group) returns (UserList){
        option (google.api.http) = {
            get: "/v1/chat/group/userslist"
		};
    };
    // Get all users list
    rpc GetUsersList(CommonRequest) returns (UserList){
        option (google.api.http) = {
            get: "/v1/chat/userslist"
		};
    };
    // Add user in a group
    rpc AddUserInGroup(AddMember) returns (CommonResponse){
        option (google.api.http) = {
            post: "/v1/chat/group/addusers"
            body:"*"
		};
    };
    // Kick out the user from the group
    rpc KickoutUserFromGroup(KickMember) returns (CommonResponse){
        option (google.api.http) = {
            post: "/v1/chat/group/kickuser"
            body:"*"
		};
    };
    // Get the chat history
    rpc GetChatHistory(ReadHistoryRequest) returns (ReadHistoryResponse){
        option (google.api.http) = {
            get: "/v1/chat/chathistory"
		};
    };

    // Get signin user details
    rpc GetUserDetails(CommonRequest) returns (User){
        option (google.api.http) = {
            get : "/v1/chat/user/details"
        };
    };

    // Leave the group
    rpc LeaveGroup(LeaveGroupRequest) returns (CommonResponse){
        option (google.api.http) = {
            post: "/v1/chat/group/leave"
            body:"*"
		};
    };
}