// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api-proto/home/chat/chat.proto

package chatpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Group struct {
	GroupId              string   `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName            string   `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	ChatId               string   `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{0}
}

func (m *Group) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Group.Unmarshal(m, b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Group.Marshal(b, m, deterministic)
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return xxx_messageInfo_Group.Size(m)
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Group) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Group) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

type TextMessage struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextMessage) Reset()         { *m = TextMessage{} }
func (m *TextMessage) String() string { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()    {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{1}
}

func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextMessage.Unmarshal(m, b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return xxx_messageInfo_TextMessage.Size(m)
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

func (m *TextMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FileMessage struct {
	Message              *TextMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	FileChunk            []byte       `protobuf:"bytes,2,opt,name=file_chunk,json=fileChunk,proto3" json:"file_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FileMessage) Reset()         { *m = FileMessage{} }
func (m *FileMessage) String() string { return proto.CompactTextString(m) }
func (*FileMessage) ProtoMessage()    {}
func (*FileMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{2}
}

func (m *FileMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileMessage.Unmarshal(m, b)
}
func (m *FileMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileMessage.Marshal(b, m, deterministic)
}
func (m *FileMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMessage.Merge(m, src)
}
func (m *FileMessage) XXX_Size() int {
	return xxx_messageInfo_FileMessage.Size(m)
}
func (m *FileMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FileMessage proto.InternalMessageInfo

func (m *FileMessage) GetMessage() *TextMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *FileMessage) GetFileChunk() []byte {
	if m != nil {
		return m.FileChunk
	}
	return nil
}

type CommonResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResponse) Reset()         { *m = CommonResponse{} }
func (m *CommonResponse) String() string { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()    {}
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{3}
}

func (m *CommonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonResponse.Unmarshal(m, b)
}
func (m *CommonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonResponse.Marshal(b, m, deterministic)
}
func (m *CommonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResponse.Merge(m, src)
}
func (m *CommonResponse) XXX_Size() int {
	return xxx_messageInfo_CommonResponse.Size(m)
}
func (m *CommonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResponse proto.InternalMessageInfo

func (m *CommonResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommonResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CreateGroup struct {
	GroupName            string   `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	IsPublic             bool     `protobuf:"varint,2,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateGroup) Reset()         { *m = CreateGroup{} }
func (m *CreateGroup) String() string { return proto.CompactTextString(m) }
func (*CreateGroup) ProtoMessage()    {}
func (*CreateGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{4}
}

func (m *CreateGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGroup.Unmarshal(m, b)
}
func (m *CreateGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGroup.Marshal(b, m, deterministic)
}
func (m *CreateGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGroup.Merge(m, src)
}
func (m *CreateGroup) XXX_Size() int {
	return xxx_messageInfo_CreateGroup.Size(m)
}
func (m *CreateGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGroup proto.InternalMessageInfo

func (m *CreateGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *CreateGroup) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

type GroupInfo struct {
	Client               string   `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	GroupName            string   `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupInfo) Reset()         { *m = GroupInfo{} }
func (m *GroupInfo) String() string { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()    {}
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{5}
}

func (m *GroupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupInfo.Unmarshal(m, b)
}
func (m *GroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupInfo.Marshal(b, m, deterministic)
}
func (m *GroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupInfo.Merge(m, src)
}
func (m *GroupInfo) XXX_Size() int {
	return xxx_messageInfo_GroupInfo.Size(m)
}
func (m *GroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GroupInfo proto.InternalMessageInfo

func (m *GroupInfo) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type GroupList struct {
	Groups               []*Group        `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Total                int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CommonResponse       *CommonResponse `protobuf:"bytes,3,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GroupList) Reset()         { *m = GroupList{} }
func (m *GroupList) String() string { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()    {}
func (*GroupList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{6}
}

func (m *GroupList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupList.Unmarshal(m, b)
}
func (m *GroupList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupList.Marshal(b, m, deterministic)
}
func (m *GroupList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupList.Merge(m, src)
}
func (m *GroupList) XXX_Size() int {
	return xxx_messageInfo_GroupList.Size(m)
}
func (m *GroupList) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupList.DiscardUnknown(m)
}

var xxx_messageInfo_GroupList proto.InternalMessageInfo

func (m *GroupList) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *GroupList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GroupList) GetCommonResponse() *CommonResponse {
	if m != nil {
		return m.CommonResponse
	}
	return nil
}

type User struct {
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName             string   `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	ChatId               string   `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{7}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *User) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *User) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

type UserList struct {
	Users                []*User         `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Total                int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	CommonResponse       *CommonResponse `protobuf:"bytes,3,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{8}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserList) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *UserList) GetCommonResponse() *CommonResponse {
	if m != nil {
		return m.CommonResponse
	}
	return nil
}

type CommonRequest struct {
	AccessToken          string   `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRequest) Reset()         { *m = CommonRequest{} }
func (m *CommonRequest) String() string { return proto.CompactTextString(m) }
func (*CommonRequest) ProtoMessage()    {}
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{9}
}

func (m *CommonRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonRequest.Unmarshal(m, b)
}
func (m *CommonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonRequest.Marshal(b, m, deterministic)
}
func (m *CommonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRequest.Merge(m, src)
}
func (m *CommonRequest) XXX_Size() int {
	return xxx_messageInfo_CommonRequest.Size(m)
}
func (m *CommonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRequest proto.InternalMessageInfo

func (m *CommonRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

type SingleMessage struct {
	ReciverId            string   `protobuf:"bytes,2,opt,name=reciver_id,json=reciverId,proto3" json:"reciver_id,omitempty"`
	ChatId               string   `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SingleMessage) Reset()         { *m = SingleMessage{} }
func (m *SingleMessage) String() string { return proto.CompactTextString(m) }
func (*SingleMessage) ProtoMessage()    {}
func (*SingleMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{10}
}

func (m *SingleMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SingleMessage.Unmarshal(m, b)
}
func (m *SingleMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SingleMessage.Marshal(b, m, deterministic)
}
func (m *SingleMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleMessage.Merge(m, src)
}
func (m *SingleMessage) XXX_Size() int {
	return xxx_messageInfo_SingleMessage.Size(m)
}
func (m *SingleMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SingleMessage proto.InternalMessageInfo

func (m *SingleMessage) GetReciverId() string {
	if m != nil {
		return m.ReciverId
	}
	return ""
}

func (m *SingleMessage) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

type ChatMessage struct {
	Senderid string `protobuf:"bytes,1,opt,name=senderid,proto3" json:"senderid,omitempty"`
	// Types that are valid to be assigned to MessageUser:
	//	*ChatMessage_Message
	//	*ChatMessage_FileMessage
	MessageUser    isChatMessage_MessageUser `protobuf_oneof:"message_user"`
	SenderName     string                    `protobuf:"bytes,4,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	IsGroupMessage bool                      `protobuf:"varint,5,opt,name=isGroupMessage,proto3" json:"isGroupMessage,omitempty"`
	// Types that are valid to be assigned to MessageGroup:
	//	*ChatMessage_SingleMessage
	//	*ChatMessage_Group
	MessageGroup         isChatMessage_MessageGroup `protobuf_oneof:"message_group"`
	ChatId               string                     `protobuf:"bytes,8,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	CreationTime         *timestamp.Timestamp       `protobuf:"bytes,9,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	DeliveryTime         *timestamp.Timestamp       `protobuf:"bytes,10,opt,name=delivery_time,json=deliveryTime,proto3" json:"delivery_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{11}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetSenderid() string {
	if m != nil {
		return m.Senderid
	}
	return ""
}

type isChatMessage_MessageUser interface {
	isChatMessage_MessageUser()
}

type ChatMessage_Message struct {
	Message *TextMessage `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type ChatMessage_FileMessage struct {
	FileMessage *FileMessage `protobuf:"bytes,3,opt,name=file_message,json=fileMessage,proto3,oneof"`
}

func (*ChatMessage_Message) isChatMessage_MessageUser() {}

func (*ChatMessage_FileMessage) isChatMessage_MessageUser() {}

func (m *ChatMessage) GetMessageUser() isChatMessage_MessageUser {
	if m != nil {
		return m.MessageUser
	}
	return nil
}

func (m *ChatMessage) GetMessage() *TextMessage {
	if x, ok := m.GetMessageUser().(*ChatMessage_Message); ok {
		return x.Message
	}
	return nil
}

func (m *ChatMessage) GetFileMessage() *FileMessage {
	if x, ok := m.GetMessageUser().(*ChatMessage_FileMessage); ok {
		return x.FileMessage
	}
	return nil
}

func (m *ChatMessage) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *ChatMessage) GetIsGroupMessage() bool {
	if m != nil {
		return m.IsGroupMessage
	}
	return false
}

type isChatMessage_MessageGroup interface {
	isChatMessage_MessageGroup()
}

type ChatMessage_SingleMessage struct {
	SingleMessage *SingleMessage `protobuf:"bytes,6,opt,name=single_message,json=singleMessage,proto3,oneof"`
}

type ChatMessage_Group struct {
	Group *Group `protobuf:"bytes,7,opt,name=group,proto3,oneof"`
}

func (*ChatMessage_SingleMessage) isChatMessage_MessageGroup() {}

func (*ChatMessage_Group) isChatMessage_MessageGroup() {}

func (m *ChatMessage) GetMessageGroup() isChatMessage_MessageGroup {
	if m != nil {
		return m.MessageGroup
	}
	return nil
}

func (m *ChatMessage) GetSingleMessage() *SingleMessage {
	if x, ok := m.GetMessageGroup().(*ChatMessage_SingleMessage); ok {
		return x.SingleMessage
	}
	return nil
}

func (m *ChatMessage) GetGroup() *Group {
	if x, ok := m.GetMessageGroup().(*ChatMessage_Group); ok {
		return x.Group
	}
	return nil
}

func (m *ChatMessage) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

func (m *ChatMessage) GetCreationTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *ChatMessage) GetDeliveryTime() *timestamp.Timestamp {
	if m != nil {
		return m.DeliveryTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChatMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChatMessage_OneofMarshaler, _ChatMessage_OneofUnmarshaler, _ChatMessage_OneofSizer, []interface{}{
		(*ChatMessage_Message)(nil),
		(*ChatMessage_FileMessage)(nil),
		(*ChatMessage_SingleMessage)(nil),
		(*ChatMessage_Group)(nil),
	}
}

func _ChatMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChatMessage)
	// message_user
	switch x := m.MessageUser.(type) {
	case *ChatMessage_Message:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case *ChatMessage_FileMessage:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChatMessage.MessageUser has unexpected type %T", x)
	}
	// message_group
	switch x := m.MessageGroup.(type) {
	case *ChatMessage_SingleMessage:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SingleMessage); err != nil {
			return err
		}
	case *ChatMessage_Group:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Group); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChatMessage.MessageGroup has unexpected type %T", x)
	}
	return nil
}

func _ChatMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChatMessage)
	switch tag {
	case 2: // message_user.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextMessage)
		err := b.DecodeMessage(msg)
		m.MessageUser = &ChatMessage_Message{msg}
		return true, err
	case 3: // message_user.file_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FileMessage)
		err := b.DecodeMessage(msg)
		m.MessageUser = &ChatMessage_FileMessage{msg}
		return true, err
	case 6: // message_group.single_message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SingleMessage)
		err := b.DecodeMessage(msg)
		m.MessageGroup = &ChatMessage_SingleMessage{msg}
		return true, err
	case 7: // message_group.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Group)
		err := b.DecodeMessage(msg)
		m.MessageGroup = &ChatMessage_Group{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChatMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChatMessage)
	// message_user
	switch x := m.MessageUser.(type) {
	case *ChatMessage_Message:
		s := proto.Size(x.Message)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChatMessage_FileMessage:
		s := proto.Size(x.FileMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// message_group
	switch x := m.MessageGroup.(type) {
	case *ChatMessage_SingleMessage:
		s := proto.Size(x.SingleMessage)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChatMessage_Group:
		s := proto.Size(x.Group)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AddMember struct {
	UserInfo             *User    `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMember) Reset()         { *m = AddMember{} }
func (m *AddMember) String() string { return proto.CompactTextString(m) }
func (*AddMember) ProtoMessage()    {}
func (*AddMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{12}
}

func (m *AddMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMember.Unmarshal(m, b)
}
func (m *AddMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMember.Marshal(b, m, deterministic)
}
func (m *AddMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMember.Merge(m, src)
}
func (m *AddMember) XXX_Size() int {
	return xxx_messageInfo_AddMember.Size(m)
}
func (m *AddMember) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMember.DiscardUnknown(m)
}

var xxx_messageInfo_AddMember proto.InternalMessageInfo

func (m *AddMember) GetUserInfo() *User {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type KickMember struct {
	UserInfo             *User    `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KickMember) Reset()         { *m = KickMember{} }
func (m *KickMember) String() string { return proto.CompactTextString(m) }
func (*KickMember) ProtoMessage()    {}
func (*KickMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{13}
}

func (m *KickMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KickMember.Unmarshal(m, b)
}
func (m *KickMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KickMember.Marshal(b, m, deterministic)
}
func (m *KickMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickMember.Merge(m, src)
}
func (m *KickMember) XXX_Size() int {
	return xxx_messageInfo_KickMember.Size(m)
}
func (m *KickMember) XXX_DiscardUnknown() {
	xxx_messageInfo_KickMember.DiscardUnknown(m)
}

var xxx_messageInfo_KickMember proto.InternalMessageInfo

func (m *KickMember) GetUserInfo() *User {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type ReadHistoryRequest struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ChatId               string   `protobuf:"bytes,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadHistoryRequest) Reset()         { *m = ReadHistoryRequest{} }
func (m *ReadHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*ReadHistoryRequest) ProtoMessage()    {}
func (*ReadHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{14}
}

func (m *ReadHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadHistoryRequest.Unmarshal(m, b)
}
func (m *ReadHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadHistoryRequest.Marshal(b, m, deterministic)
}
func (m *ReadHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadHistoryRequest.Merge(m, src)
}
func (m *ReadHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_ReadHistoryRequest.Size(m)
}
func (m *ReadHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadHistoryRequest proto.InternalMessageInfo

func (m *ReadHistoryRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ReadHistoryRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadHistoryRequest) GetChatId() string {
	if m != nil {
		return m.ChatId
	}
	return ""
}

type ReadHistoryResponse struct {
	Messages             []*ChatMessage  `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	CommonResponse       *CommonResponse `protobuf:"bytes,2,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReadHistoryResponse) Reset()         { *m = ReadHistoryResponse{} }
func (m *ReadHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*ReadHistoryResponse) ProtoMessage()    {}
func (*ReadHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{15}
}

func (m *ReadHistoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadHistoryResponse.Unmarshal(m, b)
}
func (m *ReadHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadHistoryResponse.Marshal(b, m, deterministic)
}
func (m *ReadHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadHistoryResponse.Merge(m, src)
}
func (m *ReadHistoryResponse) XXX_Size() int {
	return xxx_messageInfo_ReadHistoryResponse.Size(m)
}
func (m *ReadHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadHistoryResponse proto.InternalMessageInfo

func (m *ReadHistoryResponse) GetMessages() []*ChatMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ReadHistoryResponse) GetCommonResponse() *CommonResponse {
	if m != nil {
		return m.CommonResponse
	}
	return nil
}

type LeaveGroupRequest struct {
	GroupInfo            *Group   `protobuf:"bytes,1,opt,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"`
	UserInfo             *User    `protobuf:"bytes,2,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaveGroupRequest) Reset()         { *m = LeaveGroupRequest{} }
func (m *LeaveGroupRequest) String() string { return proto.CompactTextString(m) }
func (*LeaveGroupRequest) ProtoMessage()    {}
func (*LeaveGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{16}
}

func (m *LeaveGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaveGroupRequest.Unmarshal(m, b)
}
func (m *LeaveGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaveGroupRequest.Marshal(b, m, deterministic)
}
func (m *LeaveGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveGroupRequest.Merge(m, src)
}
func (m *LeaveGroupRequest) XXX_Size() int {
	return xxx_messageInfo_LeaveGroupRequest.Size(m)
}
func (m *LeaveGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveGroupRequest proto.InternalMessageInfo

func (m *LeaveGroupRequest) GetGroupInfo() *Group {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *LeaveGroupRequest) GetUserInfo() *User {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

type P2PChatRequest struct {
	UserInfo             *User    `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	ReciverInfo          *User    `protobuf:"bytes,2,opt,name=reciver_info,json=reciverInfo,proto3" json:"reciver_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *P2PChatRequest) Reset()         { *m = P2PChatRequest{} }
func (m *P2PChatRequest) String() string { return proto.CompactTextString(m) }
func (*P2PChatRequest) ProtoMessage()    {}
func (*P2PChatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{17}
}

func (m *P2PChatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PChatRequest.Unmarshal(m, b)
}
func (m *P2PChatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PChatRequest.Marshal(b, m, deterministic)
}
func (m *P2PChatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PChatRequest.Merge(m, src)
}
func (m *P2PChatRequest) XXX_Size() int {
	return xxx_messageInfo_P2PChatRequest.Size(m)
}
func (m *P2PChatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PChatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_P2PChatRequest proto.InternalMessageInfo

func (m *P2PChatRequest) GetUserInfo() *User {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *P2PChatRequest) GetReciverInfo() *User {
	if m != nil {
		return m.ReciverInfo
	}
	return nil
}

type AllChats struct {
	AllUsers             []*User         `protobuf:"bytes,1,rep,name=all_users,json=allUsers,proto3" json:"all_users,omitempty"`
	AllGroups            []*Group        `protobuf:"bytes,2,rep,name=all_groups,json=allGroups,proto3" json:"all_groups,omitempty"`
	CommonResponse       *CommonResponse `protobuf:"bytes,3,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AllChats) Reset()         { *m = AllChats{} }
func (m *AllChats) String() string { return proto.CompactTextString(m) }
func (*AllChats) ProtoMessage()    {}
func (*AllChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bf69eb1913423e3, []int{18}
}

func (m *AllChats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllChats.Unmarshal(m, b)
}
func (m *AllChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllChats.Marshal(b, m, deterministic)
}
func (m *AllChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllChats.Merge(m, src)
}
func (m *AllChats) XXX_Size() int {
	return xxx_messageInfo_AllChats.Size(m)
}
func (m *AllChats) XXX_DiscardUnknown() {
	xxx_messageInfo_AllChats.DiscardUnknown(m)
}

var xxx_messageInfo_AllChats proto.InternalMessageInfo

func (m *AllChats) GetAllUsers() []*User {
	if m != nil {
		return m.AllUsers
	}
	return nil
}

func (m *AllChats) GetAllGroups() []*Group {
	if m != nil {
		return m.AllGroups
	}
	return nil
}

func (m *AllChats) GetCommonResponse() *CommonResponse {
	if m != nil {
		return m.CommonResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*Group)(nil), "chatpb.Group")
	proto.RegisterType((*TextMessage)(nil), "chatpb.TextMessage")
	proto.RegisterType((*FileMessage)(nil), "chatpb.FileMessage")
	proto.RegisterType((*CommonResponse)(nil), "chatpb.CommonResponse")
	proto.RegisterType((*CreateGroup)(nil), "chatpb.CreateGroup")
	proto.RegisterType((*GroupInfo)(nil), "chatpb.GroupInfo")
	proto.RegisterType((*GroupList)(nil), "chatpb.GroupList")
	proto.RegisterType((*User)(nil), "chatpb.User")
	proto.RegisterType((*UserList)(nil), "chatpb.UserList")
	proto.RegisterType((*CommonRequest)(nil), "chatpb.CommonRequest")
	proto.RegisterType((*SingleMessage)(nil), "chatpb.SingleMessage")
	proto.RegisterType((*ChatMessage)(nil), "chatpb.ChatMessage")
	proto.RegisterType((*AddMember)(nil), "chatpb.AddMember")
	proto.RegisterType((*KickMember)(nil), "chatpb.KickMember")
	proto.RegisterType((*ReadHistoryRequest)(nil), "chatpb.ReadHistoryRequest")
	proto.RegisterType((*ReadHistoryResponse)(nil), "chatpb.ReadHistoryResponse")
	proto.RegisterType((*LeaveGroupRequest)(nil), "chatpb.LeaveGroupRequest")
	proto.RegisterType((*P2PChatRequest)(nil), "chatpb.P2PChatRequest")
	proto.RegisterType((*AllChats)(nil), "chatpb.AllChats")
}

func init() { proto.RegisterFile("api-proto/home/chat/chat.proto", fileDescriptor_4bf69eb1913423e3) }

var fileDescriptor_4bf69eb1913423e3 = []byte{
	// 1241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x51, 0x6f, 0xe3, 0x44,
	0x10, 0x3e, 0xe7, 0x9a, 0x34, 0x19, 0x27, 0xb9, 0x76, 0x9b, 0xb6, 0xa9, 0xdb, 0x5e, 0x8b, 0xa5,
	0x83, 0x52, 0xdd, 0x25, 0x10, 0xc4, 0x09, 0xdd, 0xc3, 0x9d, 0x7a, 0x45, 0xd7, 0x14, 0xae, 0xa8,
	0x72, 0x9b, 0x17, 0x4e, 0x10, 0x5c, 0x7b, 0x93, 0x98, 0xda, 0xde, 0x60, 0x3b, 0x15, 0xf7, 0x86,
	0x90, 0x10, 0xe2, 0x0d, 0x89, 0xbf, 0xc0, 0x3f, 0xe2, 0x2f, 0xf0, 0x43, 0xd0, 0xce, 0xee, 0xda,
	0x71, 0xda, 0xf4, 0xa8, 0x10, 0x2f, 0x96, 0x77, 0x76, 0xf7, 0x9b, 0x99, 0x6f, 0x67, 0xbe, 0x5d,
	0x78, 0x68, 0x8f, 0xbd, 0x27, 0xe3, 0x88, 0x25, 0xac, 0x3d, 0x62, 0x01, 0x6d, 0x3b, 0x23, 0x3b,
	0xc1, 0x4f, 0x0b, 0x8d, 0xa4, 0xc4, 0xff, 0xc7, 0x17, 0xc6, 0xce, 0x90, 0xb1, 0xa1, 0x4f, 0xdb,
	0x68, 0xbd, 0x98, 0x0c, 0xda, 0x89, 0x17, 0xd0, 0x38, 0xb1, 0x83, 0xb1, 0x58, 0x68, 0x6c, 0xc9,
	0x05, 0xf6, 0xd8, 0x6b, 0xdb, 0x61, 0xc8, 0x12, 0x3b, 0xf1, 0x58, 0x18, 0x8b, 0x59, 0xf3, 0x6b,
	0x28, 0x1e, 0x45, 0x6c, 0x32, 0x26, 0x1b, 0x50, 0x1e, 0xf2, 0x9f, 0xbe, 0xe7, 0x36, 0xb5, 0x5d,
	0x6d, 0xaf, 0x62, 0x2d, 0xe2, 0xf8, 0xd8, 0x25, 0xdb, 0x00, 0x62, 0x2a, 0xb4, 0x03, 0xda, 0x2c,
	0xe0, 0x64, 0x05, 0x2d, 0x5f, 0xd9, 0x01, 0x25, 0xeb, 0xb0, 0xc8, 0x63, 0xe1, 0x1b, 0xef, 0xe3,
	0x1c, 0x86, 0x76, 0xec, 0x9a, 0x1f, 0x80, 0x7e, 0x4e, 0x7f, 0x4c, 0x4e, 0x68, 0x1c, 0xdb, 0x43,
	0x4a, 0x9a, 0xb0, 0x18, 0x88, 0x5f, 0xe5, 0x40, 0x0e, 0xcd, 0x37, 0xa0, 0xbf, 0xf2, 0x7c, 0xaa,
	0x16, 0x3e, 0xc9, 0x2f, 0xd4, 0x3b, 0x2b, 0x2d, 0x91, 0x6c, 0x6b, 0x0a, 0x2e, 0xdd, 0xcd, 0xc3,
	0x1b, 0x78, 0x3e, 0xed, 0x3b, 0xa3, 0x49, 0x78, 0x89, 0xe1, 0x55, 0xad, 0x0a, 0xb7, 0x1c, 0x72,
	0x83, 0xf9, 0x1c, 0xea, 0x87, 0x2c, 0x08, 0x58, 0x68, 0xd1, 0x78, 0xcc, 0xc2, 0xf8, 0x96, 0x40,
	0x08, 0x81, 0x05, 0x87, 0xb9, 0x22, 0xc7, 0xa2, 0x85, 0xff, 0x66, 0x17, 0xf4, 0xc3, 0x88, 0xda,
	0x09, 0x15, 0x3c, 0xe5, 0xc9, 0xd0, 0x66, 0xc9, 0x30, 0xa0, 0xec, 0xc5, 0xa7, 0x93, 0x0b, 0xdf,
	0x73, 0x10, 0xa5, 0x6c, 0xa5, 0x63, 0xf3, 0x00, 0x2a, 0x88, 0x71, 0x1c, 0x0e, 0x18, 0x59, 0x83,
	0x92, 0xe3, 0x7b, 0x34, 0x4c, 0x24, 0x86, 0x1c, 0x91, 0x2d, 0xc8, 0xd0, 0xae, 0x71, 0x6d, 0xfe,
	0xa6, 0x49, 0x8c, 0xd7, 0x5e, 0x9c, 0x90, 0x47, 0x50, 0xc2, 0xa9, 0xb8, 0xa9, 0xed, 0xde, 0xdf,
	0xd3, 0x3b, 0x35, 0xc5, 0x13, 0x2e, 0xb1, 0xe4, 0x24, 0x69, 0x40, 0x31, 0x61, 0x89, 0xed, 0xcb,
	0xb4, 0xc4, 0x80, 0xbc, 0x80, 0x07, 0x0e, 0xf2, 0xd2, 0x8f, 0x24, 0x31, 0x78, 0x7c, 0x7a, 0x67,
	0x4d, 0xa1, 0xe4, 0x69, 0xb3, 0xea, 0x4e, 0x6e, 0x6c, 0xf6, 0x60, 0xa1, 0x17, 0xd3, 0x88, 0x9f,
	0xff, 0x24, 0xa6, 0x51, 0x56, 0x38, 0x25, 0x3e, 0x3c, 0x76, 0xc9, 0x26, 0x54, 0x70, 0x62, 0xaa,
	0x6c, 0xca, 0xdc, 0x70, 0x7b, 0xd5, 0xfc, 0xa2, 0x41, 0x99, 0xe3, 0x62, 0x86, 0x26, 0x14, 0xf9,
	0x0e, 0x95, 0x60, 0x55, 0x85, 0xc6, 0x17, 0x58, 0x62, 0xea, 0xff, 0x4a, 0xaf, 0x03, 0x35, 0xb5,
	0xe2, 0x87, 0x09, 0x8d, 0x13, 0xf2, 0x1e, 0x54, 0x6d, 0xc7, 0xa1, 0x71, 0xdc, 0x4f, 0xd8, 0x25,
	0x0d, 0x65, 0xb2, 0xba, 0xb0, 0x9d, 0x73, 0x93, 0x79, 0x04, 0xb5, 0x33, 0x2f, 0x1c, 0x66, 0xa5,
	0xbc, 0x0d, 0x10, 0x51, 0xc7, 0xbb, 0x12, 0xf4, 0xc8, 0xe3, 0x94, 0x96, 0x63, 0x77, 0x3e, 0x09,
	0x3f, 0x2d, 0x80, 0x7e, 0x38, 0xb2, 0xd3, 0xde, 0x31, 0xa0, 0x1c, 0xd3, 0xd0, 0xa5, 0x51, 0x4a,
	0x72, 0x3a, 0x26, 0xed, 0xac, 0x9c, 0x0b, 0x73, 0xdb, 0xa5, 0x7b, 0x2f, 0xab, 0xf2, 0xcf, 0xa0,
	0x8a, 0x0d, 0xa3, 0x76, 0xdd, 0xcf, 0xef, 0x9a, 0x6a, 0xc5, 0xee, 0x3d, 0x4b, 0x1f, 0x4c, 0x75,
	0xe6, 0x0e, 0xe8, 0xc2, 0xad, 0x38, 0xd3, 0x05, 0x8c, 0x04, 0x84, 0x09, 0x4f, 0xf5, 0x7d, 0xa8,
	0x7b, 0x31, 0x56, 0x9f, 0xdc, 0xd2, 0x2c, 0x62, 0x13, 0xcc, 0x58, 0xc9, 0x73, 0xa8, 0xc7, 0x48,
	0x54, 0x1a, 0x44, 0x09, 0x83, 0x58, 0x55, 0x41, 0xe4, 0x68, 0xec, 0x6a, 0x56, 0x2d, 0xce, 0xf1,
	0xfa, 0x08, 0x8a, 0x58, 0xdc, 0xcd, 0x45, 0xdc, 0x96, 0x2f, 0xfc, 0xae, 0x66, 0x89, 0xd9, 0x69,
	0x7e, 0xcb, 0xd3, 0xfc, 0x92, 0x17, 0x50, 0x73, 0x78, 0x53, 0x7b, 0x2c, 0xec, 0x73, 0xc1, 0x6c,
	0x56, 0x10, 0xc7, 0x68, 0x09, 0xb1, 0x6c, 0x29, 0x35, 0x6d, 0x9d, 0x2b, 0x35, 0xb5, 0xaa, 0x6a,
	0x03, 0x37, 0x71, 0x00, 0x97, 0xfa, 0xfc, 0x18, 0xdf, 0x0a, 0x00, 0x78, 0x37, 0x80, 0xda, 0xc0,
	0x4d, 0x2f, 0xeb, 0x50, 0x95, 0xa9, 0xf7, 0x79, 0x19, 0xbf, 0x7c, 0x00, 0x35, 0x35, 0xc6, 0xd8,
	0xcd, 0x4f, 0xa1, 0x72, 0xe0, 0xba, 0x27, 0x34, 0xb8, 0xa0, 0x11, 0xd9, 0x03, 0xec, 0x1c, 0xae,
	0x1c, 0x52, 0x13, 0xf3, 0xad, 0x90, 0xce, 0x9a, 0x4f, 0x01, 0xbe, 0xf4, 0x9c, 0xcb, 0x3b, 0xef,
	0x7b, 0x03, 0xc4, 0xa2, 0xb6, 0xdb, 0xf5, 0xe2, 0x84, 0x45, 0x6f, 0x55, 0xcd, 0x37, 0xa0, 0xe8,
	0x7b, 0x81, 0x27, 0x44, 0xaa, 0x68, 0x89, 0x01, 0xd7, 0x2e, 0x36, 0x18, 0xc4, 0x34, 0x91, 0x2d,
	0x27, 0x47, 0xf3, 0xcb, 0xf9, 0x57, 0x0d, 0x56, 0x72, 0xe8, 0x52, 0x89, 0xdb, 0x50, 0x96, 0x49,
	0xab, 0x0e, 0x4f, 0xab, 0x70, 0xaa, 0xfa, 0xad, 0x74, 0xd1, 0x4d, 0x5d, 0x5d, 0xb8, 0x53, 0x57,
	0xfb, 0xb0, 0xfc, 0x9a, 0xda, 0x57, 0x42, 0xcc, 0x55, 0x96, 0x8f, 0x95, 0xa6, 0x7b, 0x19, 0x4f,
	0x33, 0x5a, 0x2a, 0x34, 0x18, 0x95, 0xfb, 0x43, 0x29, 0x6b, 0xb8, 0xb8, 0x70, 0x2b, 0xa9, 0x3e,
	0xd4, 0x4f, 0x3b, 0xa7, 0x3c, 0x15, 0xe5, 0x2a, 0xb7, 0xf9, 0xd6, 0x13, 0x21, 0x6d, 0xa8, 0xa6,
	0xda, 0x31, 0xcf, 0x95, 0xae, 0xb4, 0x84, 0x7b, 0xfb, 0x53, 0x83, 0xf2, 0x81, 0xef, 0x73, 0x77,
	0x31, 0x77, 0x64, 0xfb, 0x7e, 0x7f, 0xbe, 0x7a, 0x96, 0x6d, 0xdf, 0xef, 0xa1, 0x80, 0x3e, 0x06,
	0xe0, 0x4b, 0xe5, 0x55, 0x52, 0xb8, 0xe9, 0x2a, 0xe1, 0x58, 0x47, 0xe2, 0x36, 0xf9, 0xaf, 0xc2,
	0xda, 0xf9, 0xbd, 0x02, 0x65, 0xa4, 0x84, 0xb1, 0x80, 0x3c, 0x85, 0x05, 0xfe, 0x4f, 0x6e, 0x3a,
	0x77, 0xe3, 0x26, 0xa3, 0x79, 0x6f, 0x4f, 0xfb, 0x48, 0x23, 0xdf, 0x42, 0xf5, 0x2c, 0xb1, 0xa3,
	0x44, 0xd2, 0x4b, 0x52, 0xe7, 0x79, 0xbe, 0x8d, 0x39, 0x41, 0x99, 0x0f, 0x7f, 0xfe, 0xeb, 0xef,
	0x3f, 0x0a, 0x4d, 0x73, 0xa5, 0x7d, 0xf5, 0xb1, 0x7c, 0x5b, 0xe1, 0x25, 0xdf, 0x1e, 0x77, 0xc6,
	0xcf, 0xb4, 0x7d, 0x72, 0x02, 0x15, 0x4e, 0x8e, 0xe0, 0x72, 0x75, 0x16, 0x44, 0x60, 0x2f, 0x29,
	0xb3, 0x22, 0xdd, 0x5c, 0x47, 0xd4, 0x65, 0xb3, 0x9a, 0xa2, 0xda, 0xbe, 0xcf, 0xe1, 0xbe, 0x81,
	0xea, 0xd4, 0x23, 0x22, 0x9e, 0x4a, 0x37, 0xb3, 0xce, 0x8d, 0x75, 0x17, 0x51, 0x0d, 0x73, 0x75,
	0x36, 0x56, 0x3c, 0x31, 0x0e, 0x6f, 0x41, 0xe5, 0x0b, 0xe6, 0x85, 0xe2, 0x85, 0x92, 0x3f, 0xba,
	0x77, 0x31, 0x60, 0x64, 0x0c, 0x7c, 0xcf, 0xbc, 0x30, 0xc3, 0x3c, 0x03, 0xfd, 0x73, 0xea, 0x53,
	0xf5, 0xee, 0xf9, 0x97, 0xa8, 0xdb, 0x88, 0xba, 0xbe, 0x9f, 0xc5, 0xea, 0x22, 0x88, 0xc0, 0x25,
	0x3d, 0xa8, 0x1e, 0xd1, 0x24, 0x7b, 0xc1, 0xcc, 0x61, 0x76, 0x39, 0xe7, 0x8c, 0xaf, 0x34, 0x37,
	0x11, 0x78, 0x95, 0x64, 0xe1, 0x8a, 0x7a, 0xf5, 0x39, 0x4c, 0x0f, 0x96, 0x14, 0x6c, 0xfa, 0x74,
	0x98, 0x09, 0x78, 0x69, 0xba, 0xf8, 0x11, 0x51, 0xd2, 0x4a, 0x9a, 0x79, 0xc4, 0x36, 0xb6, 0x0c,
	0xc2, 0x9e, 0x61, 0xb4, 0xd8, 0x24, 0xb7, 0x45, 0x7b, 0x1d, 0xda, 0x40, 0xe8, 0x06, 0x21, 0x29,
	0x74, 0x06, 0xda, 0x87, 0xfa, 0x81, 0xeb, 0xf6, 0xb0, 0xcb, 0x05, 0xb5, 0x69, 0xb6, 0xa9, 0xde,
	0xcf, 0xa5, 0xd7, 0x44, 0xe0, 0x2d, 0x73, 0x7d, 0x26, 0x66, 0xdb, 0x75, 0xd1, 0x03, 0x3f, 0xb8,
	0x01, 0x34, 0xf8, 0x0d, 0xc0, 0x26, 0x18, 0xf9, 0xab, 0x88, 0x05, 0xc2, 0x0d, 0x51, 0x98, 0xd9,
	0xfd, 0x70, 0x67, 0x3f, 0x97, 0x9e, 0x73, 0xc9, 0x1d, 0x71, 0x3f, 0x43, 0xa8, 0x1f, 0xd1, 0x84,
	0x17, 0xbe, 0x94, 0x75, 0x62, 0x28, 0xb4, 0xeb, 0x37, 0x89, 0xb1, 0x79, 0xe3, 0x9c, 0x74, 0xb7,
	0x85, 0xee, 0xd6, 0x48, 0x23, 0xab, 0xf0, 0x91, 0x9d, 0x8c, 0x24, 0xec, 0x77, 0x00, 0x99, 0x66,
	0x93, 0x0d, 0x05, 0x74, 0x4d, 0xc7, 0xe7, 0x66, 0xb3, 0x83, 0xf0, 0x1b, 0x66, 0x63, 0x26, 0x1b,
	0x9f, 0x23, 0x3c, 0xd3, 0xf6, 0x2f, 0x4a, 0x78, 0x5d, 0x7f, 0xf2, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0x29, 0xd1, 0x9b, 0x75, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatRoomClient is the client API for ChatRoom service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatRoomClient interface {
	// chat stream for both side bi-directional streaming
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoom_ChatClient, error)
	// single chat p2p
	StartP2PChat(ctx context.Context, in *P2PChatRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	// Get all the chats
	UserChats(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*AllChats, error)
	// Create chat group
	CreateGroups(ctx context.Context, in *CreateGroup, opts ...grpc.CallOption) (*CommonResponse, error)
	// Join chat group
	JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error)
	// Delete Chat group
	DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error)
	// Get all Group list
	GetGroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GroupList, error)
	// Get all user in a particular group
	GetGroupUserList(ctx context.Context, in *Group, opts ...grpc.CallOption) (*UserList, error)
	// Get all users list
	GetUsersList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*UserList, error)
	// Add user in a group
	AddUserInGroup(ctx context.Context, in *AddMember, opts ...grpc.CallOption) (*CommonResponse, error)
	// Kick out the user from the group
	KickoutUserFromGroup(ctx context.Context, in *KickMember, opts ...grpc.CallOption) (*CommonResponse, error)
	// Get the chat history
	GetChatHistory(ctx context.Context, in *ReadHistoryRequest, opts ...grpc.CallOption) (*ReadHistoryResponse, error)
	// Leave the group
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type chatRoomClient struct {
	cc *grpc.ClientConn
}

func NewChatRoomClient(cc *grpc.ClientConn) ChatRoomClient {
	return &chatRoomClient{cc}
}

func (c *chatRoomClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoom_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatRoom_serviceDesc.Streams[0], "/chatpb.ChatRoom/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRoomChatClient{stream}
	return x, nil
}

type ChatRoom_ChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatRoomChatClient struct {
	grpc.ClientStream
}

func (x *chatRoomChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRoomChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatRoomClient) StartP2PChat(ctx context.Context, in *P2PChatRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/StartP2PChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) UserChats(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*AllChats, error) {
	out := new(AllChats)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/UserChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) CreateGroups(ctx context.Context, in *CreateGroup, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/CreateGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) JoinGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/JoinGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetGroupList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetGroupUserList(ctx context.Context, in *Group, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/GetGroupUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetUsersList(ctx context.Context, in *CommonRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/GetUsersList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) AddUserInGroup(ctx context.Context, in *AddMember, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/AddUserInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) KickoutUserFromGroup(ctx context.Context, in *KickMember, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/KickoutUserFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) GetChatHistory(ctx context.Context, in *ReadHistoryRequest, opts ...grpc.CallOption) (*ReadHistoryResponse, error) {
	out := new(ReadHistoryResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/GetChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatRoomClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/chatpb.ChatRoom/LeaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatRoomServer is the server API for ChatRoom service.
type ChatRoomServer interface {
	// chat stream for both side bi-directional streaming
	Chat(ChatRoom_ChatServer) error
	// single chat p2p
	StartP2PChat(context.Context, *P2PChatRequest) (*CommonResponse, error)
	// Get all the chats
	UserChats(context.Context, *CommonRequest) (*AllChats, error)
	// Create chat group
	CreateGroups(context.Context, *CreateGroup) (*CommonResponse, error)
	// Join chat group
	JoinGroup(context.Context, *Group) (*CommonResponse, error)
	// Delete Chat group
	DeleteGroup(context.Context, *Group) (*CommonResponse, error)
	// Get all Group list
	GetGroupList(context.Context, *CommonRequest) (*GroupList, error)
	// Get all user in a particular group
	GetGroupUserList(context.Context, *Group) (*UserList, error)
	// Get all users list
	GetUsersList(context.Context, *CommonRequest) (*UserList, error)
	// Add user in a group
	AddUserInGroup(context.Context, *AddMember) (*CommonResponse, error)
	// Kick out the user from the group
	KickoutUserFromGroup(context.Context, *KickMember) (*CommonResponse, error)
	// Get the chat history
	GetChatHistory(context.Context, *ReadHistoryRequest) (*ReadHistoryResponse, error)
	// Leave the group
	LeaveGroup(context.Context, *LeaveGroupRequest) (*CommonResponse, error)
}

func RegisterChatRoomServer(s *grpc.Server, srv ChatRoomServer) {
	s.RegisterService(&_ChatRoom_serviceDesc, srv)
}

func _ChatRoom_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatRoomServer).Chat(&chatRoomChatServer{stream})
}

type ChatRoom_ChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type chatRoomChatServer struct {
	grpc.ServerStream
}

func (x *chatRoomChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRoomChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatRoom_StartP2PChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).StartP2PChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/StartP2PChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).StartP2PChat(ctx, req.(*P2PChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_UserChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).UserChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/UserChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).UserChats(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_CreateGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).CreateGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/CreateGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).CreateGroups(ctx, req.(*CreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).JoinGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).DeleteGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetGroupList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetGroupUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetGroupUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/GetGroupUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetGroupUserList(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/GetUsersList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetUsersList(ctx, req.(*CommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_AddUserInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).AddUserInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/AddUserInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).AddUserInGroup(ctx, req.(*AddMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_KickoutUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).KickoutUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/KickoutUserFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).KickoutUserFromGroup(ctx, req.(*KickMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_GetChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).GetChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/GetChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).GetChatHistory(ctx, req.(*ReadHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatRoom_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatRoomServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatpb.ChatRoom/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatRoomServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatRoom_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatpb.ChatRoom",
	HandlerType: (*ChatRoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartP2PChat",
			Handler:    _ChatRoom_StartP2PChat_Handler,
		},
		{
			MethodName: "UserChats",
			Handler:    _ChatRoom_UserChats_Handler,
		},
		{
			MethodName: "CreateGroups",
			Handler:    _ChatRoom_CreateGroups_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _ChatRoom_JoinGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ChatRoom_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _ChatRoom_GetGroupList_Handler,
		},
		{
			MethodName: "GetGroupUserList",
			Handler:    _ChatRoom_GetGroupUserList_Handler,
		},
		{
			MethodName: "GetUsersList",
			Handler:    _ChatRoom_GetUsersList_Handler,
		},
		{
			MethodName: "AddUserInGroup",
			Handler:    _ChatRoom_AddUserInGroup_Handler,
		},
		{
			MethodName: "KickoutUserFromGroup",
			Handler:    _ChatRoom_KickoutUserFromGroup_Handler,
		},
		{
			MethodName: "GetChatHistory",
			Handler:    _ChatRoom_GetChatHistory_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _ChatRoom_LeaveGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatRoom_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api-proto/home/chat/chat.proto",
}
