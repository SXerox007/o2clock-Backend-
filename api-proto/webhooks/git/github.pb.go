// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api-proto/webhooks/git/github.proto

package githubpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GithubPushWebhookRequest struct {
	Ref                  string           `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Head                 string           `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
	Before               string           `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
	Size                 int32            `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	DistinctSize         int32            `protobuf:"varint,5,opt,name=distinct_size,json=distinctSize,proto3" json:"distinct_size,omitempty"`
	Commits              []*GithubCommits `protobuf:"bytes,6,rep,name=commits,proto3" json:"commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GithubPushWebhookRequest) Reset()         { *m = GithubPushWebhookRequest{} }
func (m *GithubPushWebhookRequest) String() string { return proto.CompactTextString(m) }
func (*GithubPushWebhookRequest) ProtoMessage()    {}
func (*GithubPushWebhookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fa4d49b90e0de, []int{0}
}

func (m *GithubPushWebhookRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GithubPushWebhookRequest.Unmarshal(m, b)
}
func (m *GithubPushWebhookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GithubPushWebhookRequest.Marshal(b, m, deterministic)
}
func (m *GithubPushWebhookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubPushWebhookRequest.Merge(m, src)
}
func (m *GithubPushWebhookRequest) XXX_Size() int {
	return xxx_messageInfo_GithubPushWebhookRequest.Size(m)
}
func (m *GithubPushWebhookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubPushWebhookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GithubPushWebhookRequest proto.InternalMessageInfo

func (m *GithubPushWebhookRequest) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *GithubPushWebhookRequest) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *GithubPushWebhookRequest) GetBefore() string {
	if m != nil {
		return m.Before
	}
	return ""
}

func (m *GithubPushWebhookRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GithubPushWebhookRequest) GetDistinctSize() int32 {
	if m != nil {
		return m.DistinctSize
	}
	return 0
}

func (m *GithubPushWebhookRequest) GetCommits() []*GithubCommits {
	if m != nil {
		return m.Commits
	}
	return nil
}

type GithubCommits struct {
	Sha                  string   `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Author               string   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Since                string   `protobuf:"bytes,4,opt,name=since,proto3" json:"since,omitempty"`
	Until                string   `protobuf:"bytes,5,opt,name=until,proto3" json:"until,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GithubCommits) Reset()         { *m = GithubCommits{} }
func (m *GithubCommits) String() string { return proto.CompactTextString(m) }
func (*GithubCommits) ProtoMessage()    {}
func (*GithubCommits) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fa4d49b90e0de, []int{1}
}

func (m *GithubCommits) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GithubCommits.Unmarshal(m, b)
}
func (m *GithubCommits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GithubCommits.Marshal(b, m, deterministic)
}
func (m *GithubCommits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GithubCommits.Merge(m, src)
}
func (m *GithubCommits) XXX_Size() int {
	return xxx_messageInfo_GithubCommits.Size(m)
}
func (m *GithubCommits) XXX_DiscardUnknown() {
	xxx_messageInfo_GithubCommits.DiscardUnknown(m)
}

var xxx_messageInfo_GithubCommits proto.InternalMessageInfo

func (m *GithubCommits) GetSha() string {
	if m != nil {
		return m.Sha
	}
	return ""
}

func (m *GithubCommits) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GithubCommits) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *GithubCommits) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

func (m *GithubCommits) GetUntil() string {
	if m != nil {
		return m.Until
	}
	return ""
}

type CommonResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResponse) Reset()         { *m = CommonResponse{} }
func (m *CommonResponse) String() string { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()    {}
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_925fa4d49b90e0de, []int{2}
}

func (m *CommonResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonResponse.Unmarshal(m, b)
}
func (m *CommonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonResponse.Marshal(b, m, deterministic)
}
func (m *CommonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResponse.Merge(m, src)
}
func (m *CommonResponse) XXX_Size() int {
	return xxx_messageInfo_CommonResponse.Size(m)
}
func (m *CommonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResponse proto.InternalMessageInfo

func (m *CommonResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CommonResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*GithubPushWebhookRequest)(nil), "githubpb.GithubPushWebhookRequest")
	proto.RegisterType((*GithubCommits)(nil), "githubpb.GithubCommits")
	proto.RegisterType((*CommonResponse)(nil), "githubpb.CommonResponse")
}

func init() {
	proto.RegisterFile("api-proto/webhooks/git/github.proto", fileDescriptor_925fa4d49b90e0de)
}

var fileDescriptor_925fa4d49b90e0de = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x3f, 0x6e, 0xdb, 0x30,
	0x18, 0xc5, 0x21, 0xdb, 0xb2, 0x6b, 0xb6, 0x6e, 0x0b, 0xc2, 0x6d, 0x59, 0xa3, 0x83, 0x21, 0x2f,
	0x46, 0x81, 0x5a, 0xb0, 0xbb, 0x75, 0xe8, 0x52, 0xa0, 0x45, 0xb7, 0x82, 0x1e, 0x3a, 0x06, 0x94,
	0xfc, 0x59, 0x24, 0x62, 0x93, 0x8a, 0x3e, 0xca, 0x41, 0x32, 0xe6, 0x00, 0x59, 0x72, 0xa5, 0xdc,
	0x20, 0x57, 0xc8, 0x41, 0x02, 0x92, 0x12, 0x0c, 0x27, 0x83, 0x80, 0xf7, 0xbe, 0xf7, 0x20, 0xfe,
	0xf8, 0x87, 0xcc, 0x44, 0xa9, 0xbe, 0x95, 0x95, 0xb1, 0x26, 0xbd, 0x84, 0x4c, 0x1a, 0x73, 0x8e,
	0x69, 0xa1, 0xac, 0xfb, 0x64, 0x9d, 0x2d, 0x7c, 0x42, 0x5f, 0x05, 0x57, 0x66, 0x93, 0x2f, 0x85,
	0x31, 0xc5, 0x0e, 0x52, 0x51, 0xaa, 0x54, 0x68, 0x6d, 0xac, 0xb0, 0xca, 0x68, 0x0c, 0xbd, 0xe4,
	0x3e, 0x22, 0xec, 0x8f, 0xaf, 0xfe, 0xab, 0x51, 0xfe, 0x0f, 0xff, 0xe3, 0x70, 0x51, 0x03, 0x5a,
	0xfa, 0x9e, 0x74, 0x2b, 0xd8, 0xb2, 0x68, 0x1a, 0xcd, 0x87, 0xdc, 0x49, 0x4a, 0x49, 0x4f, 0x82,
	0xd8, 0xb0, 0x8e, 0x1f, 0x79, 0x4d, 0x3f, 0x92, 0x7e, 0x06, 0x5b, 0x53, 0x01, 0xeb, 0xfa, 0x69,
	0xe3, 0x5c, 0x17, 0xd5, 0x35, 0xb0, 0xde, 0x34, 0x9a, 0xc7, 0xdc, 0x6b, 0x3a, 0x23, 0xa3, 0x8d,
	0x42, 0xab, 0x74, 0x6e, 0xcf, 0x7c, 0x18, 0xfb, 0xf0, 0x4d, 0x3b, 0x5c, 0xbb, 0xd2, 0x92, 0x0c,
	0x72, 0xb3, 0xdf, 0x2b, 0x8b, 0xac, 0x3f, 0xed, 0xce, 0x5f, 0xaf, 0x3e, 0x2d, 0xda, 0xdd, 0x2c,
	0x02, 0xeb, 0xaf, 0x10, 0xf3, 0xb6, 0x97, 0x5c, 0x91, 0xd1, 0x49, 0xe2, 0xd0, 0x51, 0x8a, 0x16,
	0x1d, 0xa5, 0x70, 0x38, 0xa5, 0xb0, 0xb2, 0x45, 0x77, 0xda, 0xa1, 0x8b, 0xda, 0x4a, 0x53, 0xb5,
	0xe8, 0xc1, 0xd1, 0x31, 0x89, 0x51, 0xe9, 0x3c, 0xb0, 0x0f, 0x79, 0x30, 0x6e, 0x5a, 0x6b, 0xab,
	0x76, 0x1e, 0x7a, 0xc8, 0x83, 0x49, 0x7e, 0x92, 0xb7, 0x6e, 0x51, 0xa3, 0x39, 0x60, 0x69, 0x34,
	0x02, 0x65, 0x64, 0xb0, 0x07, 0x44, 0x51, 0x40, 0xb3, 0x7e, 0x6b, 0x1d, 0x43, 0x6e, 0x36, 0xe0,
	0x19, 0x62, 0xee, 0xf5, 0xea, 0x36, 0x22, 0x1f, 0x02, 0x7b, 0x73, 0xfa, 0x6b, 0xa8, 0x0e, 0x2a,
	0x07, 0xa4, 0x35, 0xf9, 0xfc, 0x1b, 0x6c, 0x2e, 0x8f, 0xf7, 0x13, 0x76, 0xf7, 0x57, 0x6f, 0x0d,
	0x4d, 0x9e, 0x9f, 0xc9, 0xcb, 0xfb, 0x9b, 0xb0, 0x63, 0xe7, 0x14, 0x31, 0x99, 0xdc, 0x3c, 0x3c,
	0xde, 0x75, 0xc6, 0xc9, 0xbb, 0xf4, 0xb0, 0x6c, 0x1e, 0x4e, 0x5a, 0xd6, 0x28, 0x7f, 0x44, 0x5f,
	0xb3, 0xbe, 0x7f, 0x19, 0xdf, 0x9f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x66, 0xd2, 0xcd, 0xb5, 0x68,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GithubWebhookServicesClient is the client API for GithubWebhookServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GithubWebhookServicesClient interface {
	FetchGithubPushCommitInfo(ctx context.Context, in *GithubPushWebhookRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type githubWebhookServicesClient struct {
	cc *grpc.ClientConn
}

func NewGithubWebhookServicesClient(cc *grpc.ClientConn) GithubWebhookServicesClient {
	return &githubWebhookServicesClient{cc}
}

func (c *githubWebhookServicesClient) FetchGithubPushCommitInfo(ctx context.Context, in *GithubPushWebhookRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/githubpb.GithubWebhookServices/FetchGithubPushCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubWebhookServicesServer is the server API for GithubWebhookServices service.
type GithubWebhookServicesServer interface {
	FetchGithubPushCommitInfo(context.Context, *GithubPushWebhookRequest) (*CommonResponse, error)
}

func RegisterGithubWebhookServicesServer(s *grpc.Server, srv GithubWebhookServicesServer) {
	s.RegisterService(&_GithubWebhookServices_serviceDesc, srv)
}

func _GithubWebhookServices_FetchGithubPushCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GithubPushWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubWebhookServicesServer).FetchGithubPushCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/githubpb.GithubWebhookServices/FetchGithubPushCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubWebhookServicesServer).FetchGithubPushCommitInfo(ctx, req.(*GithubPushWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GithubWebhookServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "githubpb.GithubWebhookServices",
	HandlerType: (*GithubWebhookServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchGithubPushCommitInfo",
			Handler:    _GithubWebhookServices_FetchGithubPushCommitInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api-proto/webhooks/git/github.proto",
}
